(()=>{"use strict";class t{constructor(){this.anthropic_api_key="",this.openai_api_key="",this.openai_endpoint="https://api.openai.com/v1/chat/completions",this.anthropic_endpoint="https://api.anthropic.com/v1/complete"}async loadApiKeys(){return new Promise((t=>{chrome.storage.sync.get(["openai_api_key","anthropic_api_key"],(e=>{this.openai_api_key=e.openai_api_key||"",this.anthropic_api_key=e.anthropic_api_key||"",t()}))}))}static async saveApiKeys(t,e){return new Promise((n=>{chrome.storage.sync.set({openai_api_key:t,anthropic_api_key:e},(()=>{n()}))}))}async call_gpt4(t,e,n="chatgpt-4o-latest",a=1e3,o=.7){if(!this.openai_api_key)throw new Error("OpenAI API key is not set.");const i={model:n,messages:[{role:"system",content:t},{role:"user",content:e}],temperature:o,max_tokens:a},r=await fetch(this.openai_endpoint,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.openai_api_key}`},body:JSON.stringify(i)});if(!r.ok){const t=await r.json();throw new Error(`OpenAI API error: ${r.status} ${r.statusText} - ${JSON.stringify(t)}`)}return(await r.json()).choices[0].message.content.trim()}async call_claude(t,e,n="claude-3-5-sonnet-20240620",a=4e3,o=.5){if(!this.anthropic_api_key)throw new Error("Anthropic API key is not set.");const i={"x-api-key":this.anthropic_api_key,"Content-Type":"application/json","Anthropic-Version":"2023-06-01"},r={model:n,prompt:`${t}\n\n${e}`,max_tokens_to_sample:a,temperature:o},s=await fetch(this.anthropic_endpoint,{method:"POST",headers:i,body:JSON.stringify(r)});if(!s.ok){const t=await s.json();throw new Error(`Anthropic API error: ${s.status} ${s.statusText} - ${JSON.stringify(t)}`)}return(await s.json()).completion.trim()}async call_llm(t,e,n,a=4e3,o=.5){try{return t.toLowerCase().startsWith("claude")?await this.call_claude(e,n,t,a,o):await this.call_gpt4(e,n,t,a,o)}catch(t){return console.error("LLM API call error:",t),"An error occurred while processing your request."}}}const e=/(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/i,n="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36,gzip(gfe)",a=/<text start="([^"]*)" dur="([^"]*)">([^<]*)<\/text>/g;class o extends Error{constructor(t){super(`[YoutubeTranscript] ðŸš¨ ${t}`)}}class i extends o{constructor(){super("YouTube is receiving too many requests from this IP and now requires solving a captcha to continue")}}class r extends o{constructor(t){super(`The video is no longer available (${t})`)}}class s extends o{constructor(t){super(`Transcript is disabled on this video (${t})`)}}class c extends o{constructor(t){super(`No transcripts are available for this video (${t})`)}}class l extends o{constructor(t,e,n){super(`No transcripts are available in ${t} this video (${n}). Available languages: ${e.join(", ")}`)}}class p{static fetchTranscript(t,e){var o,p,d,u,h;return p=this,d=void 0,h=function*(){const p=this.retrieveVideoId(t),d=yield fetch(`https://www.youtube.com/watch?v=${p}`,{headers:Object.assign(Object.assign({},(null==e?void 0:e.lang)&&{"Accept-Language":e.lang}),{"User-Agent":n})}),u=yield d.text(),h=u.split('"captions":');if(h.length<=1){if(u.includes('class="g-recaptcha"'))throw new i;if(!u.includes('"playabilityStatus":'))throw new r(t);throw new s(t)}const m=null===(o=(()=>{try{return JSON.parse(h[1].split(',"videoDetails')[0].replace("\n",""))}catch(t){return}})())||void 0===o?void 0:o.playerCaptionsTracklistRenderer;if(!m)throw new s(t);if(!("captionTracks"in m))throw new c(t);if((null==e?void 0:e.lang)&&!m.captionTracks.some((t=>t.languageCode===(null==e?void 0:e.lang))))throw new l(null==e?void 0:e.lang,m.captionTracks.map((t=>t.languageCode)),t);const y=((null==e?void 0:e.lang)?m.captionTracks.find((t=>t.languageCode===(null==e?void 0:e.lang))):m.captionTracks[0]).baseUrl,g=yield fetch(y,{headers:Object.assign(Object.assign({},(null==e?void 0:e.lang)&&{"Accept-Language":e.lang}),{"User-Agent":n})});if(!g.ok)throw new c(t);return[...(yield g.text()).matchAll(a)].map((t=>{var n;return{text:t[3],duration:parseFloat(t[2]),offset:parseFloat(t[1]),lang:null!==(n=null==e?void 0:e.lang)&&void 0!==n?n:m.captionTracks[0].languageCode}}))},new((u=void 0)||(u=Promise))((function(t,e){function n(t){try{o(h.next(t))}catch(t){e(t)}}function a(t){try{o(h.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof u?o:new u((function(t){t(o)}))).then(n,a)}o((h=h.apply(p,d||[])).next())}))}static retrieveVideoId(t){if(11===t.length)return t;const n=t.match(e);if(n&&n.length)return n[1];throw new o("Impossible to retrieve Youtube video ID.")}}const d=document.getElementById("transcript-display"),u=document.getElementById("processed-display"),h=document.getElementById("prev-btn"),m=document.getElementById("next-btn"),y=document.getElementById("segment-info"),g=document.getElementById("process-btn"),v=document.getElementById("loader"),f=document.querySelectorAll(".tab-button"),w=document.querySelectorAll(".tab-content"),_=document.getElementById("openai-api-key"),k=document.getElementById("anthropic-api-key"),b=document.getElementById("save-keys-btn"),I=document.getElementById("model-select");let x=[],E=[],A=0;const $=new t;function L(){d.textContent=E[A],u.textContent="Processed output will appear here."}function T(){h.disabled=0===A,m.disabled=A===E.length-1}function C(){y.textContent=`Segment ${A+1} of ${E.length}`}document.addEventListener("DOMContentLoaded",(async function(){try{await $.loadApiKeys(),_.value=$.openai_api_key||"",k.value=$.anthropic_api_key||"";const e=await async function(){return new Promise(((t,e)=>{chrome.tabs.query({active:!0,currentWindow:!0},(e=>{if(0===e.length)return void t(null);const n=e[0],a=new URL(n.url).searchParams.get("v");t(a)}))}))}();e?(await async function(t){try{const e=await p.fetchTranscript(t);x=e.map((t=>{return`[${e=t.start,`${Math.floor(e/60)}:${Math.floor(e%60).toString().padStart(2,"0")}`}] ${t.text}`;var e})).join("\n"),console.log(x)}catch(t){console.error("Error fetching transcript:",t),d.textContent="Error fetching transcript."}}(e),x=x.split("\n").map((t=>{const e=t.match(/\[(\d+):(\d+)\]\s*(.*)/);return e?{timestamp:60*parseInt(e[1],10)+parseInt(e[2],10),text:e[3]}:null})).filter((t=>null!==t)),function(){E=[];let t=0;for(;t<x.length;){const e=x[t].timestamp+1200;let n=x.findIndex((t=>t.timestamp>e),t);-1===n&&(n=x.length);const a=x.slice(t,n).map((t=>{return`[${e=t.timestamp,`${Math.floor(e/60)}:${(e%60).toString().padStart(2,"0")}`}] ${t.text}`;var e})).join("\n");E.push(a),t=n}0===E.length&&E.push("No transcript available."),A=0,C()}(),L(),T()):(console.error("Video ID not found."),d.textContent="Unable to retrieve video ID."),f.forEach((t=>{t.addEventListener("click",(()=>{f.forEach((t=>t.classList.remove("active"))),w.forEach((t=>t.classList.add("hidden"))),t.classList.add("active");const e=t.getAttribute("data-tab"),n=document.getElementById(e);n&&n.classList.remove("hidden")}))})),h.addEventListener("click",(()=>{A>0&&(A--,L(),T(),C())})),m.addEventListener("click",(()=>{A<E.length-1&&(A++,L(),T(),C())})),g.addEventListener("click",(async()=>{const t=I.value,e=E[A];if(e&&"No transcript available."!==e){v.classList.remove("hidden"),u.textContent="Processing...";try{const n=await $.call_llm(t,"You are an assistant that summarizes and analyzes YouTube video transcripts.",e);u.textContent=n}catch(t){u.textContent="Error processing with LLM.",console.error("LLM processing error:",t)}finally{v.classList.add("hidden")}}else alert("No transcript segment to process.")})),b.addEventListener("click",(async()=>{const e=_.value.trim(),n=k.value.trim();try{await t.saveApiKeys(e,n),await $.loadApiKeys(),alert("API Keys saved successfully!")}catch(t){console.error("Error saving API keys:",t),alert("Failed to save API Keys.")}}))}catch(t){console.error("Error initializing popup:",t),d.textContent="Error initializing popup."}})),console.log("Application initialized")})();